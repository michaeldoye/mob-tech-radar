{"version":3,"sources":["components/radar.ts","apis/api.service.ts","apis/api.config.ts","App.tsx","serviceWorker.ts","index.tsx","logo.svg"],"names":["data","ApiService","Object","classCallCheck","this","createClass","key","value","competency","getDataByCompetency","console","log","radarConfig","svg_id","width","height","colors","background","grid","inactive","title","quadrants","name","rings","color","print_layout","entries","label","quadrant","ring","moved","api_config","CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","authorizeButton","document","getElementById","signoutButton","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","initClient","bind","assertThisInitialized","radar_visualization","handleClientLoad","gapi","load","_this2","client","init","apiKey","api","clientId","discoveryDocs","scope","then","auth2","getAuthInstance","isSignedIn","listen","updateSigninStatus","get","onclick","handleAuthClick","handleSignoutClick","error","appendPre","JSON","stringify","style","display","listFiles","message","pre","textContent","createTextNode","appendChild","_this3","drive","files","list","pageSize","fields","response","result","length","i","file","id","event","signIn","signOut","react_default","a","createElement","className","src","logo","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.345d6f94.chunk.js","sourcesContent":["import { ApiService } from \"../apis/api.service\";\n\nexport interface RadarConfig {\n  svg_id: string;\n  width: number;\n  height: number;\n  colors: RadarColor;\n  title: string;\n  quadrants: RadarQuadrants[];\n  rings: RadarRing[];\n  print_layout: boolean;\n  entries: RadarEntries[];\n}\n\ninterface RadarQuadrants {\n  name: string;\n}\n\ninterface RadarRing {\n  name: string;\n  color: string;\n}\n\ninterface RadarColor {\n  background: string;\n  grid: string;\n  inactive: string;\n}\n\ninterface RadarEntries {\n  label: string;\n  quadrant: number;\n  ring: number;\n  moved: number;\n  link?: string;\n  active?: boolean;\n}\n\nconst apiService = new ApiService();\n\nconst data = apiService.getDataByCompetency(\"blah\");\nconsole.log(data);\n\nexport const radarConfig: RadarConfig = {\n  svg_id: \"radar\",\n  width: 1450,\n  height: 1000,\n  colors: {\n    background: \"#fff\",\n    grid: \"#bbb\",\n    inactive: \"#ddd\"\n  },\n  title: \"My Radar\",\n  quadrants: [\n    { name: \"Languages\" },\n    { name: \"Infrastructure\" },\n    { name: \"Frameworks\" },\n    { name: \"Data Management\" }\n  ],\n  rings: [\n    { name: \"ADOPT\", color: \"#93c47d\" },\n    { name: \"TRIAL\", color: \"#93d2c2\" },\n    { name: \"ASSESS\", color: \"#fbdb84\" },\n    { name: \"HOLD\", color: \"#efafa9\" }\n  ],\n  print_layout: true,\n  entries: [\n    {\n      label: \"Angular\",\n      quadrant: 2, // 0,1,2,3 (counting clockwise, starting from bottom right)\n      ring: 0, // 0,1,2,3 (starting from inside)\n      moved: 0\n    },\n    {\n      label: \"React.js\",\n      quadrant: 2,\n      ring: 0,\n      moved: 1\n    },\n    {\n      label: \"Vue.js\",\n      quadrant: 2,\n      ring: 1,\n      moved: 0\n    },\n    {\n      label: \"Next.js\",\n      quadrant: 2,\n      ring: 2,\n      moved: 0\n    },\n    {\n      label: \"jQuery\",\n      quadrant: 2,\n      ring: 3,\n      moved: -1\n    },\n    {\n      label: \"Angular.js\",\n      quadrant: 2,\n      ring: 3,\n      moved: -1\n    }\n  ]\n};\n","export class ApiService {\n  getDataByCompetency(competency: string): Promise<any> | string {\n    return competency;\n  }\n}\n","export default {\n  // Client ID and API key from the Developer Console\n  CLIENT_ID:\n    \"40186560779-t8svtj60bk0reo5t3vda6nhdkdsldjet.apps.googleusercontent.com\",\n  API_KEY: \"AIzaSyC04kCTpH5fi4j8T7Qinf1PrUU2uLHyscI\",\n\n  // Array of API discovery doc URLs for APIs used by the quickstart\n  DISCOVERY_DOCS: [\n    \"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"\n  ],\n\n  // Authorization scopes required by the API; multiple scopes can be\n  // included, separated by spaces.\n  SCOPES: \"https://www.googleapis.com/auth/drive.metadata.readonly\"\n};\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { RadarConfig, radarConfig } from \"./components/radar\";\nimport api from \"./apis/api.config\";\n\ndeclare function radar_visualization(config: RadarConfig): void;\ndeclare const gapi: any;\n\nvar authorizeButton: any = document.getElementById(\"authorize_button\");\nvar signoutButton: any = document.getElementById(\"signout_button\");\nclass App extends Component {\n  constructor(props: any) {\n    super(props);\n    this.initClient = this.initClient.bind(this);\n  }\n\n  componentDidMount(): void {\n    radar_visualization(radarConfig);\n    this.handleClientLoad();\n  }\n\n  handleClientLoad() {\n    gapi.load(\"client:auth2\", this.initClient);\n  }\n\n  initClient() {\n    gapi.client\n      .init({\n        apiKey: api.API_KEY,\n        clientId: api.CLIENT_ID,\n        discoveryDocs: api.DISCOVERY_DOCS,\n        scope: api.SCOPES\n      })\n      .then(\n        () => {\n          // Listen for sign-in state changes.\n          gapi.auth2\n            .getAuthInstance()\n            .isSignedIn.listen(this.updateSigninStatus.bind(this));\n\n          // Handle the initial sign-in state.\n          this.updateSigninStatus(\n            gapi.auth2.getAuthInstance().isSignedIn.get()\n          );\n          authorizeButton.onclick = this.handleAuthClick;\n          signoutButton.onclick = this.handleSignoutClick;\n        },\n        (error: any) => {\n          this.appendPre(JSON.stringify(error, null, 2));\n        }\n      );\n  }\n\n  updateSigninStatus(isSignedIn: any) {\n    if (isSignedIn) {\n      authorizeButton.style.display = \"none\";\n      signoutButton.style.display = \"block\";\n      this.listFiles();\n    } else {\n      authorizeButton.style.display = \"block\";\n      signoutButton.style.display = \"none\";\n    }\n  }\n\n  appendPre(message: any) {\n    const pre: any = document.getElementById(\"content\");\n    const textContent = document.createTextNode(message + \"\\n\");\n    pre.appendChild(textContent);\n  }\n\n  listFiles() {\n    gapi.client.drive.files\n      .list({\n        pageSize: 10,\n        fields: \"nextPageToken, files(id, name)\"\n      })\n      .then((response: any) => {\n        this.appendPre(\"Files:\");\n        var files = response.result.files;\n        if (files && files.length > 0) {\n          for (var i = 0; i < files.length; i++) {\n            var file = files[i];\n            this.appendPre(file.name + \" (\" + file.id + \")\");\n          }\n        } else {\n          this.appendPre(\"No files found.\");\n        }\n      });\n  }\n\n  /**\n   *  Sign in the user upon button click.\n   */\n  handleAuthClick(event: MouseEvent) {\n    gapi.auth2.getAuthInstance().signIn();\n  }\n\n  /**\n   *  Sign out the user upon button click.\n   */\n  handleSignoutClick(event: MouseEvent) {\n    gapi.auth2.getAuthInstance().signOut();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <svg id=\"radar\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}